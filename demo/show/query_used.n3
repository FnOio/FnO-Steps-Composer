@prefix ex: <http://example.org/ns/example#>.
@prefix step: <http://localhost:8000/steps#>.
@prefix gps: <http://josd.github.io/eye/reasoning/gps/gps-schema#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix o-persoon: <https://data.vlaanderen.be/ns/persoon#>.
@prefix : <http://example.org#>.



{
?step ex:displayInput true.
{?map gps:description (?from ?between ?to ?step ?duration ?cost ?belief ?comfort) } <= ?where.
?scope e:call ?where.



?step :hasInput ?input.

?scope e:findall ({?s ?p ?o} {?where log:includes {?s ?p ?o}. ?scope e:fail {?p a e:Builtin }} ?shortWherePre).

?shortWherePre log:conjunction ?shortWhere.


(?shortWhere ?input) e:graphIntersection ?shortWhere.


?scope e:findall ( {?s ?p ?o} {?input log:includes {?s ?p ?o}. ?scope e:call {?s ?p ?o}} ?triples   ).

?triples log:conjunction ?con.
}
=>
{?step :canUse ?con.
?step :possiblyMissing :nothing.
}.



{
?step ex:displayInput true.
{?map gps:description (?from ?between ?to ?step ?duration ?cost ?belief ?comfort) } <= ?where.
?scope e:fail ?where.
?scope e:call {?x a o-persoon:Inwoner}.

?step :hasInput ?input.

(?input  {?x a o-persoon:Inwoner}) e:graphIntersection  {?x a o-persoon:Inwoner}.


?scope e:findall ( {?s ?p ?o} {?input log:includes {?s ?p ?o}. ?scope e:call {?s ?p ?o}
} ?triples   ).

?scope e:findall ( {?s ?p ?o} {?input log:includes {?s ?p ?o}. ?scope e:fail {?s ?p ?o}
} ?triples2   ).

(?triples (true)) list:append ?list.


?list log:conjunction ?con.
?con e:labelvars ?i2.


(?triples2 (true)) list:append ?list2.
?list2 log:conjunction ?con2.
?con2 e:labelvars ?i3.

}
=>
{ ?step :canUse ?i2. ?step :possiblyMissing ?i3 }.


