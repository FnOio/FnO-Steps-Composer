@prefix : <http://example.org#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.


{
  ?graph :getInfo ?info 
}
<=
{


#?graph e:graphList ?gList.



_:x e:findall ( {?s2 ?p2 ?o2} { ?graph log:includes {?s2 ?p2 ?o2}. 
                 ?scope e:call {?s2 ?p2 ?o2}  } ?list2 ).



?list2 log:conjunction ?con2.

(?graph ?con2) e:graphIntersection ?con2.
("!") e:derive true.
?graph e:graphList ?list.

("!") e:derive true.
_:e e:trace (5 ?graph).
(?list  ()) :replace ?out.

("!") e:derive true.
?out log:conjunction ?info.
 ("!") e:derive true.
}.




{
 (() ?out) :replace ?out.
} <= 
{
("!") e:derive true.
}.

{
 (?list ?replaced) :replace ?out.
} <= 
{


?list rdf:first ?first.
?list rdf:rest ?rest.

?first :findEvidence ?info.
("!") e:derive true.

(?replaced (?info)) list:append ?replaced2.
("!") e:derive true.
(?rest ?replaced2) :replace ?out.
("!") e:derive true.
}.

{
 (?list ?replaced) :replace ?out.
} <= 
{
?list rdf:first ?first.
?list rdf:rest ?rest.

?first <= true.


("!") e:derive true.

(?replaced (?first)) list:append ?replaced2.



(?rest ?replaced2) :replace ?out.
("!") e:derive true.
}.

{
 (?list ?replaced) :replace ?out.
} <= 
{
?list rdf:first ?first.
?list rdf:rest ?rest.

?scope e:fail ?first.

(?replaced (?first)) list:append ?replaced2.

(?rest ?replaced2) :replace ?out.

}.

{?first :findEvidence ?info}
<=
{
?first log:equalTo {?s ?p ?o}.
{?s ?p ?o} <= ?body.
?body log:notEqualTo true.
?scope e:call ?body.
("!") e:derive true.

?body :getInfo ?info. 
("!") e:derive true.
}.

{?first :findEvidence ?info}
<=
{
?first log:equalTo {?s ?p ?o}.
{?s ?p ?o} <= ?body.
?body log:notEqualTo true.
?scope e:fail ?body.
("!") e:derive true.


?body :getInfo ?info. 
("!") e:derive true.
}.





