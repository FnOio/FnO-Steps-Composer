@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix ex: <https://example.org/ns/example#> .
@prefix schema: <https://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ops: <https://data.vlaanderen.be/shacl/persoon-basis#> .
@prefix o-steps: <https://fast.ilabt.imec.be/ns/oslo-steps/0.2#> .
@prefix o-persoon: <https://data.vlaanderen.be/ns/persoon#> .

#@prefix state: <{{base}}/states#> .
#@prefix shape: <{{base}}/shapes#> .
#@prefix step: <{{base}}/steps#> .

@prefix state: <https://example.org/ns/example#> .
@prefix shape: <https://example.org/ns/example#> .
@prefix step: <https://example.org/ns/example#> .



# needed for advanced shacl, to use prefixes in SPARQL query string
<https://schema.org/> sh:prefix "schema" .
<https://data.vlaanderen.be/doc/applicatieprofiel/persoon-basis#> sh:prefix "o-persoon" .


#
# first name
#



shape:firstNameShape a o-steps:StateShape ;
  rdfs:label "A citizen's first name"@en ;
  rdfs:comment "User with valid first name"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:firstNameLength , shape:firstNameExistence.

shape:firstNameLength a sh:PropertyShape ;
  rdfs:label "First name length constraints"@en ;
  rdfs:comment "Minimum and maximum for a valid first name"@en ;
  sh:path foaf:givenName ;
  sh:minLength 2 ;
  sh:maxLength 25 .

shape:firstNameExistence a sh:PropertyShape ;
  rdfs:comment "every person should have a first name"@en ;
  sh:path foaf:givenName ;
  sh:minCount 1 .

#
# last name
#
shape:lastNameShape a o-steps:StateShape ;
  rdfs:label "A citizen's last name"@en ;
  rdfs:comment "User with valid first name"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:lastNameLength, shape:lastNameExistence .

shape:lastNameLength a sh:PropertyShape ;
  rdfs:label "First name length constraints"@en ;
  rdfs:comment "Minimum and maximum for a valid first name"@en ;
  sh:path foaf:familyName ;
  sh:minLength 2 ;
  sh:maxLength 55 .

shape:lastNameExistence a sh:PropertyShape ;
  sh:path foaf:familyName ;
  sh:minCount 1 .

#
# gender constraints (sorry 2019)
#
shape:genderShape a o-steps:StateShape ;
  rdfs:label "A citizen's gender"@en ;
  rdfs:comment "User with a valid gender"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:genderValidValues, shape:genderExistence .

shape:genderValidValues a sh:PropertyShape ;
  rdfs:label "Valid gender values"@en ;
  sh:path o-persoon:geslacht ;
  sh:in ( "male" "female" ) .

shape:genderExistence a sh:PropertyShape ;
  sh:path o-persoon:geslacht ;
  sh:minCount 1 . 


#
# Email address
#
shape:emailAddressShape a o-steps:StateShape ;
  rdfs:label "A citizen's email"@en ;
  rdfs:comment "User with a valid email address"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:emailPattern, shape:emailExistence .

shape:emailPattern a sh:PropertyShape ;
  rdfs:label "Valid email address"@en ;
  sh:path schema:email ;
  sh:pattern "todo" .

shape:emailExistence a sh:PropertyShape ;
  sh:path schema:email ;
  sh:minCount 1 . 

#
# Mobile phone number
#
shape:mobilePhoneNumberShape a o-steps:StateShape ;
  rdfs:label "A citizen's mobile phone number"@en ;
  rdfs:comment "User with a valid mobile phone number"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:mobilePhoneNumberExistence .




shape:mobilePhoneNumberExistence		sh:path schema:contactPoint;
                sh:qualifiedValueShape [ sh:path  schema:contactType;
                                         sh:hasValue "gsm" ] ;
                sh:node [ sh:path schema:telephone;
                          sh:minCount 1 ];
                sh:qualifiedMinCount 1 .


#
# phone number
#
shape:phoneNumberShape a o-steps:StateShape ;
  rdfs:label "A citizen's phone number"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:phoneNumberExistence .




shape:phoneNumberExistence		sh:path schema:contactPoint;
                sh:qualifiedValueShape [ sh:path  schema:contactType;
                                         sh:hasValue "phone" ] ;
                sh:node [ sh:path schema:telephone;
                          sh:minCount 1 ];
                sh:qualifiedMinCount 1 .

#
# national number
#
shape:nationalNumberBelgiumShape a o-steps:StateShape ;
  rdfs:label "Householder national number"@en ;
  rdfs:comment "User with valid Belgian national number"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:nationalNumberPatternBelgium ;
  sh:property shape:nationalNumberObliged .

shape:nationalNumberPatternBelgium a sh:PropertyShape ;
  rdfs:label "The regular expression of a Belgian national number"@en ;
  rdfs:label "De reguliere expressie van een Belgisch Rijksregisternummer"@nl ;
  rdfs:label "Der reguläre Ausdruck einer belgischen Reichsregisternummer"@de ;
  sh:path o-persoon:registratie .
# This statement raises syntax errors in n3
#  sh:pattern """^[0-9]{2}[.\- ]{0,1}[0-9]{2}[.\- ]{0,1}[0-9]{2}[.\- ]{0,1}[0-9]{3}[.\- ]{0,1}[0-9]{2}$""" .

shape:nationalNumberObliged a sh:PropertyShape ;
  rdfs:label "Obliged national number"@en ;
  rdfs:label "Verplicht nationaal nummer"@nl ;
  rdfs:label "Benötigte Personenkennzeichnung"@de ;
  rdfs:comment "There can be exactly one national number"@en ;
  rdfs:comment "Er kan precies één nationaal nummer zijn"@nl ;
  rdfs:comment "Es kann nur genau eine Personenkennzeichnung geben"@de ;
  sh:path ex:nationalNumber ;
  sh:minCount 1 ;
  sh:maxCount 1 .

#
# bank account number
#
shape:bankAccountNumberEuropeShape a o-steps:StateShape ;
  rdfs:label "Citizen bank account number"@en ;
  rdfs:comment "User with valid bank account number"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:bankAccountNumberPatternEurope, shape:bankAccountNumberExistence .

shape:bankAccountNumberExistence a sh:PropertyShape ;
  sh:path ex:bankAccountNumber ;
  sh:minCount 1 . 

shape:bankAccountNumberPatternEurope a sh:PropertyShape ;
  rdfs:label "IBAN pattern"@en ;
  rdfs:comment "The regular expression of a European bank account number (IBAN)"@en ;
  sh:path ex:bankAccountNumber ;
  sh:pattern "todo" .

#
# nationality
#
shape:nationalityShape a o-steps:StateShape ;
  rdfs:label "Citizen nationality"@en ;
  rdfs:comment "User with valid nationality"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:validNationality .

shape:validNationality a sh:PropertyShape ;
  rdfs:label "Valid nationality"@en ;
  sh:path o-persoon:heeftNationaliteit ;
  sh:class o-persoon:Nationaliteit .

#
# residence permit
#
shape:residencePermitShape a o-steps:StateShape ;
  rdfs:label "Citizen residence permit"@en ;
  rdfs:comment "User with valid residence permit"@en ;
  rdfs:comment "Assuming that if a Citizen has an official address there is also a residence permit. Needs a change!"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:validResidence, shape:residenceExistence .

shape:validResidence a sh:PropertyShape ;
  rdfs:label "Valid residence"@en ;
  rdfs:comment "Assuming that if a Citizen has an official address there is also a residence permit. Needs a change!"@en ;
  sh:path o-persoon:heeftVerblijfplaats ;
  sh:class o-persoon:Verblijfplaats .

shape:residenceExistence a sh:PropertyShape ;
  sh:path o-persoon:heeftVerblijfplaats ;
  sh:minCount 1 . 

#
# birth date
#  
shape:birthDateShape a o-steps:StateShape ;
  rdfs:label "Citizen birth date"@en ;
  rdfs:comment "User with a valid birth date"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:validBirth .

shape:validBirth a sh:PropertyShape ;
  rdfs:label "Valid date of birth"@en ;
  sh:path o-persoon:heeftGeboorte ;
  sh:minCount 1 ;
  sh:maxCount 1 ;
  sh:class o-persoon:Geboorte ;
  sh:node ops:PersoonsgebeurtenisShape .

#
# city of birth
#
shape:cityOfBirthShape a o-steps:StateShape ;
  rdfs:label "Citizen city of birth"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:validBirth .

#
# address
#
shape:addressShape a o-steps:StateShape ;
  rdfs:label "Citizen address"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:validAddress, shape:addressExistence  .

shape:validAddress a sh:PropertyShape ;
  rdfs:label "valid address"@en ;
  sh:path o-persoon:verblijfsadres ;
  sh:node ops:VerblijfplaatsShape .


shape:addressExistence a sh:PropertyShape ;
  sh:path ( o-persoon:heeftVerblijfplaats o-persoon:verblijfsadres) ;
  sh:minCount 1 .



#
# profession
#
shape:professionShape a o-steps:StateShape ;
  rdfs:label "Citizen profession"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:validProfession .

shape:validProfession a sh:PropertyShape ;
  rdfs:label "Valid profession" ;
  sh:path schema:hasOccupation ;
  sh:minCount 1 .

#
# number of family members
#
shape:numberOfFamilyMembersShape a o-steps:StateShape ;
  rdfs:label "Citizen number of family members"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:validNumberOfFamilyMembers, shape:numberOfFamilyMembersExistence .

shape:validNumberOfFamilyMembers a sh:PropertyShape ;
  rdfs:label "valid number of family members"@en ;
  sh:path ex:numberOfFamilyMembers ;
  sh:minInclusive 1 .

shape:numberOfFamilyMembersExistence a sh:PropertyShape ;
  sh:path ex:numberOfFamilyMembers ;
  sh:minCount 1 .

#
# moving date
#
shape:movingDateShape a o-steps:StateShape ;
  rdfs:label "Citizen moving date"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:validMovingDate, shape:movingDateExistence .

shape:validMovingDate a sh:PropertyShape ;
  rdfs:label "valid date" ;
  sh:path ex:movingDate ;
  sh:datatype xsd:date .

shape:movingDateExistence a sh:PropertyShape ;
  sh:path ex:movingDate ;
  sh:minCount 1 .

#
# moving addres
#
shape:movingAddressShape a o-steps:StateShape ;
  rdfs:label "Citizen moving address"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:validMovingAddress, shape:movingAddressExistence .

shape:validMovingAddress a sh:PropertyShape ;
  rdfs:label "valid moving address"@en ;
  sh:path ex:movingAddress ;
  sh:node ops:VerblijfplaatsShape .

shape:movingAddressExistence a sh:PropertyShape ;
  sh:path ex:movingAddress ;
  sh:minCount 1 .
  
#
# billing address
#
shape:billingAddressShape a o-steps:StateShape ;
  rdfs:label "Citizen billing address"@en ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:validBillingAddress, shape:billingAddressExistence .

shape:validBillingAddress a sh:PropertyShape ;
  rdfs:label "valid billing address"@en ;
  sh:path ex:billingAddress ;
  sh:node ops:VerblijfplaatsShape .

shape:billingAddressExistence  a sh:PropertyShape ;
  sh:path ex:billingAdress;
  sh:minCount 1 .

#
# moving city
# TODO: that should actually be part of a Verblijfsplaats or Adresvoorstelling
#
shape:movingCity a o-steps:State ;
  rdfs:label "City a citizen wants to move to"@en .

shape:movingCityShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:movingCityExistence .

shape:movingCityExistence a sh:PropertyShape ;
  sh:path ex:movingCity;
  sh:minCount 1 .


#waste containers
shape:number40LiterGreyWasteContainerShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:number40LiterGreyWasteContainerExistence .

shape:number40LiterGreyWasteContainerExistence a sh:PropertyShape ;
  sh:path ex:numberOfRequested40LiterGreyWasteContainers;
  sh:minCount 1 .

shape:number120LiterGreyWasteContainerShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:number120LiterGreyWasteContainerExistence .

shape:number120LiterGreyWasteContainerExistence a sh:PropertyShape ;
  sh:path ex:numberOfRequested120LiterGreyWasteContainers;
  sh:minCount 1 .

shape:number240LiterGreyWasteContainerShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:number240LiterGreyWasteContainerExistence .

shape:number240LiterGreyWasteContainerExistence a sh:PropertyShape ;
  sh:path ex:numberOfRequested240LiterGreyWasteContainers;
  sh:minCount 1 .

shape:greyWasteContainerLockShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:lockNededGreyWasteContainerExistence .

shape:lockNededGreyWasteContainerExistence a sh:PropertyShape ;
  sh:path ex:lockNededForGreyWasteContainer;
  sh:minCount 1 .

shape:number40LiterGreenWasteContainerShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:number40LiterGreenWasteContainerExistence .

shape:number40LiterGreenWasteContainerExistence a sh:PropertyShape ;
  sh:path ex:numberOfRequested40LiterGreenWasteContainers;
  sh:minCount 1 .

shape:number120LiterGreenWasteContainerShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:number120LiterGreenWasteContainerExistence .

shape:number120LiterGreenWasteContainerExistence a sh:PropertyShape ;
  sh:path ex:numberOfRequested120LiterGreenWasteContainers;
  sh:minCount 1 .

shape:greenWasteContainerLockShape  a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:lockNededGreenWasteContainerExistence .

shape:lockNededGreenWasteContainerExistence a sh:PropertyShape ;
  sh:path ex:lockNededForGreenWasteContainer;
  sh:minCount 1 .

#todo: make a shortcut rule for "yes"
shape:greenWasteSelfCompostShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:greenWasteSelfCompostExistence .

shape:greenWasteSelfCompostExistence a sh:PropertyShape ;
  sh:path ex:needForGreenWasteContainer;
  sh:minCount 1 .

state:greenWasteContainerStopCollectingInfoShape  a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:greenWasteContainerStopExistence .

shape:greenWasteContainerStopExistence a sh:PropertyShape ;
  sh:path ex:stopGreeWasteContainer;
  sh:minCount 1 .


shape:number40LiterPaperWasteContainerShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:number40LiterPaperWasteContainerExistence .

shape:number40LiterPaperWasteContainerExistence a sh:PropertyShape ;
  sh:path ex:numberOfRequested40LiterPaperWasteContainers;
  sh:minCount 1 .

shape:number240LiterPaperWasteContainerShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:number240LiterPaperWasteContainerExistence .

shape:number240LiterPaperWasteContainerExistence a sh:PropertyShape ;
  sh:path ex:numberOfRequested240LiterPaperWasteContainers;
  sh:minCount 1 .

shape:number1100LiterPaperWasteContainerShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:number1100LiterPaperWasteContainerExistence .

shape:number1100LiterPaperWasteContainerExistence a sh:PropertyShape ;
  sh:path ex:numberOfRequested1100LiterPaperWasteContainers;
  sh:minCount 1 .

#Confirmation of address change
shape:addressChangeConfirmedShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:addressChangeConfirmationExistence .

shape:addressChangeConfirmationExistence a sh:PropertyShape ;
  sh:path ex:confirmationOfAddressChange;
  sh:minCount 1 .

shape:addressChangeOnEIDShape a o-steps:StateShape ;
  sh:targetClass o-persoon:Inwoner ;
  sh:property shape:addressChangeOnEIDExistence .

shape:addressChangeOnEIDExistence a sh:PropertyShape ;
  sh:path ex:addressChanged;
  sh:minCount 1 .


#
# 
