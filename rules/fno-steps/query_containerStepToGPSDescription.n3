@prefix fno-steps: <https://w3id.org/imec/ns/fno-steps#> .
@prefix ex: <https://example.org/ns/example#> .
@prefix var: <https://example.org/ns/var#> .
PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX gps: <http://josd.github.io/eye/reasoning/gps/gps-schema#>
@prefix : <https://example.org/ns/example#> .
PREFIX list: <http://www.w3.org/2000/10/swap/list#>
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix o-persoon: <https://data.vlaanderen.be/ns/persoon#> .
@prefix var: <http://josd.github.io/.well-known/genid/pP7dSETOSHCTU6bSn:iLn_1X3mg#>.

{

?step a fno-steps:ContainerLevelStep.



?step fno-steps:producesState ?ov.


_:x e:findall ( ?pattern { ?step fno-steps:requiresState ?y. ?y fno-steps:hasStateShape ?stateShape. ?stateShape :pattern ?pattern} ?inlist).

_:x e:findall ( ?pattern {?step  fno-steps:producesState ?y. ?y fno-steps:hasStateShape ?stateShape. ?stateShape :pattern ?pattern} ?outlist ).

#_:h e:trace ?outlist.
?step  fno-steps:producesState ?y. ?y fno-steps:hasStateShape ?stateShape. ?stateShape :pattern ?pattern.


?inlist :separate ((true) ?ins1 (true) ?skolI).
?outlist :separate ((true) ?outs (true) ?skol).



(  ?ins1 ?skol ({var:x a ?some-class. }) ) list:append ?in.

#?outTriples  :produceSkolemfunctions (() ?skolem).
#?outTriples log:conjunction ?out.

?outs log:conjunction ?out.
?in log:conjunction ?ins.
}
=>
{
#the values here are currently fixed.
{ex:movemap gps:description (true true ?out ?step 10 10 0.9 0.9)} <= ?ins.
}.



