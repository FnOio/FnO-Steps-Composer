@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix p-plan: <http://purl.org/net/p-plan#> .
@prefix o-address: <https://data.vlaanderen.be/ns/adres#> .
@prefix o-steps: <https://fast.ilabt.imec.be/ns/oslo-steps/0.2#> .
@prefix ex: <https://example.org/ns/example#> .
@prefix var: <https://example.org/ns/var#> .
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX gps: <http://josd.github.io/eye/reasoning/gps/gps-schema#>
@prefix : <https://example.org/ns/example#> .
PREFIX list: <http://www.w3.org/2000/10/swap/list#>
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix oslo: <https://example.org/ns/oslo#> .
@prefix o-persoon: <https://data.vlaanderen.be/ns/persoon#> .
@prefix var: <http://josd.github.io/.well-known/genid/pP7dSETOSHCTU6bSn:iLn_1X3mg#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.

{
?shape a o-steps:StateShape.

?shape sh:property ?p;
 sh:targetClass o-persoon:Inwoner.

?p sh:path ?path;
   sh:qualifiedValueShape ?sh2;
   sh:qualifiedMinCount 1;
   sh:node ?node.


?sh2 sh:path ?p2;
     sh:hasValue ?v.

?node sh:path ?p3;
     sh:minCount 1.


}
=>
{
?shape :pattern ({ var:x ?path ?y. ?y ?p2 ?v.  ?y ?p3 ?o} {(var:x ?path ?p2 ?v ?p3) e:skolem ?o. (var:x ?path ?p2) e:skolem ?y. }  ). 
}.


{
?stateShape a o-steps:StateShape; sh:property ?property; sh:targetClass o-persoon:Inwoner . ?property sh:path ?path; sh:minCount 1.
?path log:rawType ?t. ?t log:notEqualTo rdf:List.

}
=>
{
?stateShape :pattern ( {var:x ?path ?o} {(var:x ?path) e:skolem ?o} ).
}.

{
?stateShape a o-steps:StateShape; sh:property ?property. ?property sh:path ?path; sh:minCount 1; sh:targetClass o-persoon:Inwoner.
?path log:rawType ?t. ?t log:notEqualTo rdf:List.


}
=>
{
?stateShape :pattern ( {var:x ?path ?o} {(var:x ?path) e:skolem ?o} ).
}.

{
?stateShape a o-steps:StateShape; sh:property ?property; sh:targetClass o-persoon:Inwoner . ?property sh:path ?path; sh:minCount 1.
?path log:rawType [ log:equalTo rdf:List].
?path :unfold ?pattern.
}
=>
{
?stateShape :pattern ?pattern.
}.

{?path :unfold ?pattern}
<=
{
?path rdf:first ?first.
?path rdf:rest ?rest.

(?path ?first 1) e:skolem ?o.
?rest :makePattern ( {var:x ?first ?o} {(var:x ?first) e:skolem ?o} ?o   ?pattern ).
}.

{() :makePattern ( ?triples ?skolems ?var ?out).}
<={

?out log:equalTo (?triples ?skolems).

}.

{
?list :makePattern ( ?triples ?skolems ?var ?pattern).
}
<=
{

?list rdf:first ?first.
?list rdf:rest ?rest.

(?list ?first 2) e:skolem ?o.

(?triples {?var ?first ?o}) log:conjunction ?newTriples.
(?skolems {(?var ?first) e:skolem ?o}) log:conjunction ?newSkolems. 

?rest :makePattern ( ?newTriples ?newSkolems ?o  ?pattern).
}.

{
?stateShape a o-steps:StateShape; sh:property ?property; sh:targetClass o-persoon:Inwoner . ?property sh:path ?path; sh:hasValue ?value.

}
=>
{
?stateShape :pattern ( {var:x ?path ?value} true ).
}.

